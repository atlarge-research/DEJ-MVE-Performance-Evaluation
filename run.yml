# LAUNCH PROGRAMS
- name: Run experiment
  hosts: server
  gather_facts: false
  tasks:
    - name: Run MVE server and JMX exporter agent
      shell: cd "{{minecraft_tmp_dir.path}}" && {{JVM_config_parameters}}
      async: "{{server_runtime_s}}"
      poll: 0
    - name: Start Node exporter
      shell: "cd {{playbook_dir}} && cd node_exporter_dir && ./node_exporter"
      async: "{{server_runtime_s}}"
      poll: 0
    - name: Start Prometheus
      shell: |
        cd "{{prometheus_tmp_dir.path}}/prometheus"
        ./prometheus --config.file=prometheus_config.yml
      async: "{{server_runtime_s}}"
      poll: 0
    - name: Server start up
      pause:
        seconds: 60


- name: Run client play
  hosts: clients
  gather_facts: false
  tasks:
    - set_fact:
         server_ib_ip: "{{ '10.149.0.' ~ (groups['server'][0][-2:] | int) }}"      
    - name: Run player simulation
      shell: eval "$(conda shell.bash hook)" && conda activate scratch && cd "{{playbook_dir}}/bot_scripts" && node {{bot_behavior_script}} {{server_ib_ip}} {{ansible_host}} {{players_per_node}}
      async: "{{server_runtime_s}}"
      register: player_sim_result
      poll: 0

- name: Start tick time monitoring
  hosts: server
  gather_facts: false
  tasks: 
    - name: Register monotime starttime
      shell: python -u -c 'import time; print(time.monotonic() + 60)'
      register: mono_time
    - set_fact:
        mono_time_start: "{{mono_time.stdout}}"
    - name: Register monotime end_time
      shell: python -u -c 'import time; print(time.monotonic() + 60 + {{experiment_duration_s}})'
      register: time_mono
    - set_fact:
        mono_time_end: "{{time_mono.stdout}}"
    - name: Start tick time python script
      shell: "cd {{minecraft_tmp_dir.path}} && python jolokia_get_minecraft_tick.py {{playbook_dir}}/results/{{timestamp}}/tick_times.json {{mono_time_start}} {{mono_time_end}} >> {{playbook_dir}}/jolokia.log 2>&1" 
      async: "{{server_runtime_s}}"
      poll: 0
      register: jolokia_result
    - name: tick time gathering startup and player connecting
      pause:
        seconds: 60
    - name: Register start time
      shell: date -u +%Y-%m-%dT%H:%M:%S
      register: date
    - set_fact:
        start_time: "{{date.stdout}}"
    - name: Sleep during experiment
      pause:
        seconds: "{{experiment_duration_s}}"